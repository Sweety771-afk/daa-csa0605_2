import math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

def closest_pair(points):
    def closest_util(px, py):
        if len(px) <= 3:
            return brute_force(px)
        
        mid = len(px) // 2
        mid_point = px[mid]
        
        pyl = [p for p in py if p[0] <= mid_point[0]]
        pyr = [p for p in py if p[0] > mid_point[0]]
        
        dl = closest_util(px[:mid], pyl)
        dr = closest_util(px[mid:], pyr)
        
        d = min(dl, dr)
        
        strip = [p for p in py if abs(p[0] - mid_point[0]) < d]
        return min(d, strip_closest(strip, d))

    def strip_closest(strip, d):
        min_dist = d
        for i in range(len(strip)):
            for j in range(i + 1, len(strip)):
                if (strip[j][1] - strip[i][1]) < min_dist:
                    min_dist = min(min_dist, distance(strip[i], strip[j]))
        return min_dist

    points.sort(key=lambda x: x[0])
    py = sorted(points, key=lambda x: x[1])
    return closest_util(points, py)

def brute_force(points):
    min_dist = float('inf')
    for i in range(len(points)):
        for j in range(i + 1, len(points)):
            min_dist = min(min_dist, distance(points[i], points[j]))
    return min_dist

# Example usage
points = [(0, 0), (1, 1), (2, 2), (3, 3)]
print("The closest distance is:", closest_pair(points))
