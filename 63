def findTheCity(n, edges, distanceThreshold):
    # Initialize the distance matrix
    dist = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
        
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)
        dist[v][u] = min(dist[v][u], w)

    # Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    # Count reachable cities
    city_count = [0] * n
    for i in range(n):
        for j in range(n):
            if dist[i][j] <= distanceThreshold:
                city_count[i] += 1

    # Find the city with the smallest count and highest index
    min_count = float('inf')
    city_index = -1
    for i in range(n):
        if city_count[i] <= min_count:
            min_count = city_count[i]
            city_index = i

    return city_index
