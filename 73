def is_safe(graph, colors, node, color):
    for neighbor in graph[node]:
        if colors[neighbor] == color:
            return False
    return True

def graph_coloring_util(graph, m, colors, node):
    if node == len(graph):
        return True

    for color in range(1, m + 1):
        if is_safe(graph, colors, node, color):
            colors[node] = color
            if graph_coloring_util(graph, m, colors, node + 1):
                return True
            colors[node] = 0  # Backtrack

    return False

def graph_coloring(graph, m):
    colors = [0] * len(graph)
    if graph_coloring_util(graph, m, colors, 0):
        return colors
    return None

# Example usage
adjacency_list = [
    [1, 2],  # Region 0 is adjacent to 1 and 2
    [0, 2],  # Region 1 is adjacent to 0 and 2
    [0, 1]   # Region 2 is adjacent to 0 and 1
]
m = 3  # Number of colors
result = graph_coloring(adjacency_list, m)
print("Coloring of regions:", result)
