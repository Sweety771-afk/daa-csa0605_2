def smallestStringWithSwaps(s: str, pairs: List[List[int]]) -> str:
    from collections import defaultdict

    # Union-Find structure
    parent = list(range(len(s)))

    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]

    def union(x, y):
        parent[find(x)] = find(y)

    # Create unions based on pairs
    for a, b in pairs:
        union(a, b)

    # Group characters by their root parent
    groups = defaultdict(list)
    for i in range(len(s)):
        root = find(i)
        groups[root].append(s[i])

    # Sort characters in each group
    for key in groups:
        groups[key].sort(reverse=True)

    # Build the result string
    result = []
    for i in range(len(s)):
        root = find(i)
        result.append(groups[root].pop())

    return ''.join(result)

# Example usage
s = "dcab"
pairs = [[0, 3], [1, 2]]
print(smallestStringWithSwaps(s, pairs))  # Output: "abcd"
