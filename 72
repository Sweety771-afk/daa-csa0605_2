import numpy as np

# Initialize the distance matrix
routers = ['A', 'B', 'C', 'D', 'E', 'F']
distance_matrix = np.array([
    [0, 3, np.inf, np.inf, np.inf, np.inf],
    [3, 0, 1, 7, np.inf, np.inf],
    [np.inf, 1, 0, 2, 3, np.inf],
    [np.inf, 7, 2, 0, 1, 5],
    [np.inf, np.inf, 3, 1, 0, 2],
    [np.inf, np.inf, np.inf, 5, 2, 0]
])

# Floyd's Algorithm implementation
def floyd_warshall(dist):
    n = len(dist)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    return dist

# Calculate shortest paths
shortest_paths = floyd_warshall(distance_matrix.copy())
print("Shortest path from A to F before link failure:", shortest_paths[0][5])

# Simulate link failure between Router B and Router D
distance_matrix[1][3] = np.inf  # Set distance to infinity
distance_matrix[3][1] = np.inf  # Symmetric update
shortest_paths_after_failure = floyd_warshall(distance_matrix.copy())
print("Shortest path from A to F after link failure:", shortest_paths_after_failure[0][5])
